# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: load-testing
  labels:
    name: load-testing
    app.kubernetes.io/name: load-testing

---
# ConfigMap für App-Konfiguration
apiVersion: v1
kind: ConfigMap
metadata:
  name: load-test-config
  namespace: load-testing
data:
  PORT: "8080"
  HOST: "0.0.0.0"
  FLASK_ENV: "production"
  LOG_LEVEL: "INFO"

---
# Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: load-test-app
  namespace: load-testing
  labels:
    app: load-test-app
    version: v1.0.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: load-test-app
  template:
    metadata:
      labels:
        app: load-test-app
        version: v1.0.0
      annotations:
        # Instana Annotations für besseres Tracing
        instana.io/monitored: "true"
        # Prometheus Annotations
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: load-test-app
        image: load-test-app:latest  # Ersetze mit deinem Image
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        
        # Environment Variablen
        envFrom:
        - configMapRef:
            name: load-test-config
        
        # Resource Limits für besseres Turbonomic Monitoring
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        
        # Health Checks
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        
        # Security Context
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          readOnlyRootFilesystem: false  # stress-ng benötigt Write-Zugriff
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE

---
# Service
apiVersion: v1
kind: Service
metadata:
  name: load-test-service
  namespace: load-testing
  labels:
    app: load-test-app
  annotations:
    # Service Monitoring Annotations
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
  selector:
    app: load-test-app

---
# Ingress (optional, für externen Zugriff)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: load-test-ingress
  namespace: load-testing
  annotations:
    kubernetes.io/ingress.class: "nginx"  # Anpassen je nach Ingress Controller
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - host: load-test.example.com  # Ersetze mit deiner Domain
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: load-test-service
            port:
              number: 80

---
# HorizontalPodAutoscaler für Turbonomic Testing
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: load-test-hpa
  namespace: load-testing
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: load-test-app
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
# ServiceMonitor für Prometheus (falls Prometheus Operator verwendet wird)
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: load-test-monitor
  namespace: load-testing
  labels:
    app: load-test-app
spec:
  selector:
    matchLabels:
      app: load-test-app
  endpoints:
  - port: http
    path: /metrics
    interval: 30s

